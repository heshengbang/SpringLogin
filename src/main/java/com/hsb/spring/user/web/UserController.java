package com.hsb.spring.user.web;import com.hsb.spring.blog.dao.IBlogDao;import com.hsb.spring.entity.BlogEntity;import com.hsb.spring.user.dao.IUserDao;import com.hsb.spring.entity.UserEntity;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.*;import java.util.List;/* * Copyright &copy;2011-2016 hsb */@Controllerpublic class UserController {    private final transient IUserDao userDao;    private final transient IBlogDao blogDao;    @Autowired    public UserController(IUserDao userDao, IBlogDao blogDao) {        this.userDao = userDao;        this.blogDao = blogDao;    }    @RequestMapping(value = "/admin/users/show/{id}", method = RequestMethod.GET)    public String showUser(@PathVariable("id")Integer userId, ModelMap modelMap) {        UserEntity userEntity = userDao.findOne(userId);        modelMap.addAttribute("user", userEntity);        return "admin/userDetail";    }    @RequestMapping(value = "/admin/users/update/{id}", method = RequestMethod.GET)    public String forwardUpdateUser(@PathVariable("id")Integer userId, ModelMap modelMap) {        UserEntity userEntity = userDao.findOne(userId);        modelMap.addAttribute("user", userEntity);        return "admin/userUpdate";    }    @RequestMapping(value = "/admin/users/delete", method = RequestMethod.POST)    @ResponseBody    public String deleteUser(@ModelAttribute("id")Integer userId) {        List<BlogEntity> blogEntityList = blogDao.getBlogsByUserId(userId);        if(blogEntityList.size() == 0){            userDao.delete(userId);            userDao.flush();            return "SUCCESS";        }else{            return ""+blogEntityList.size();        }    }    @RequestMapping(value = "/admin/users", method = RequestMethod.GET)    public String getUsers(ModelMap modelMap) {        List<UserEntity> userEntities = userDao.findAll();        modelMap.addAttribute("userList", userEntities);        return "/admin/users";    }    @RequestMapping(value = "/admin/users/addUser", method = RequestMethod.POST)    public String addUser(@ModelAttribute("user")UserEntity userEntity){        userDao.saveAndFlush(userEntity);        return "redirect:/admin/users";    }    @RequestMapping(value = "/admin/users/update", method = RequestMethod.POST)    public String updateUser(@ModelAttribute("user")UserEntity userEntity){        userDao.updateUser(userEntity.getNickname(),userEntity.getFirstName(),userEntity.getLastName(),userEntity.getPassword(),userEntity.getId());        userDao.flush();        return "redirect:/admin/users";    }    @RequestMapping(value = "/admin/users/add", method = RequestMethod.GET)    public String  forwardAddUser(){        return "admin/addUser";    }    @RequestMapping(value = "/", method = RequestMethod.GET)    public String index() {        return "index";    }}